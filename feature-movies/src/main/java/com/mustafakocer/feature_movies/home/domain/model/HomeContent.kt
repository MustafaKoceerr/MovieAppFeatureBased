package com.mustafakocer.feature_movies.home.domain.model

/**
 * Home screen'in t√ºm i√ßeriƒüi
 * Her kategori i√ßin ayrƒ± section
 */
data class HomeContent(
    val nowPlayingSection: MovieSection,
    val popularSection: MovieSection,
    val topRatedSection: MovieSection,
    val upcomingSection: MovieSection,
) {
    /**
     * T√ºm section'larƒ±n listesi (UI'da iterate etmek i√ßin)
     */
    val allSections: List<MovieSection>
        get() = listOf(nowPlayingSection, popularSection, topRatedSection, upcomingSection)

    /**
     * Herhangi bir section loading durumunda mƒ±?
     */
    val isAnyLoading: Boolean
        get() = allSections.any { it.isLoading }

    /**
     * Herhangi bir section'da error var mƒ±?
     */
    val hasAnyError: Boolean
        get() = allSections.any { it.error != null }

    /**
     * T√ºm section'lar bo≈ü mu?
     */
    val isEmpty: Boolean
        get() = allSections.all { it.movies.isEmpty() }

    /**
     * ‚úÖ CEVAP: EVET, uygun. √á√ºnk√º bu fonksiyonlar business logic deƒüil, model-level convenience logic i√ßeriyor.
     * NEDEN BU FONKSƒ∞YONLAR BUSINESS LOGIC DEƒûƒ∞L?
     * updateSection(...) ve getSection(...):
     *
     * Sadece data class'ƒ±n kendi verileri √ºzerinde √ßalƒ±≈üƒ±yor.
     *
     * Dƒ±≈ü servislere √ßaƒürƒ± yapmƒ±yor, kullanƒ±cƒ± girdisi i≈ülemiyor, domain kararlarƒ± vermiyor.
     *
     * Yalnƒ±zca HomeContent objesinin i√ß yapƒ±sƒ±nƒ± immutably g√ºncellemek veya i√ßinden veri almak i√ßin var.
     *
     * Bu t√ºr fonksiyonlar, modelin i√ßsel davranƒ±≈üƒ± (invariantlarƒ±nƒ± koruma, par√ßalarƒ±nƒ± kolayca y√∂netme) ile ilgilidir.
     *
     * NEDEN DOMAIN KATMANINDA OLMASI UYGUNDUR?
     * Domain Layer, sadece veri sƒ±nƒ±fƒ± deƒüil, bu sƒ±nƒ±fƒ±n b√ºt√ºnl√ºƒü√ºn√º koruyacak fonksiyonlarƒ± da i√ßerebilir.
     *
     * Eƒüer bu HomeContent nesnesi, sadece domain'de varsa ve ba≈üka yerde anlamlƒ± deƒüilse:
     *
     * Bu fonksiyonlar i√ßin ayrƒ± bir Mapper, Helper ya da UseCase tanƒ±mlamak gereksiz abstraction olur.
     *
     * Ayrƒ±ca bu fonksiyonlar:
     *
     * Domain nesnesinin deƒüi≈ütirilemezliƒüini korur (copy kullanƒ±yor).
     *
     * Domain nesnesinin kategori-tabanlƒ± eri≈üimini kolayla≈ütƒ±rƒ±r (getSection, updateSection).
     */
    /**
     * üî∏ Peki ne zaman uygunsuz olurdu?
     * Bu fonksiyonlar ≈üunlarƒ± yapsaydƒ±:
     *
     * Uygunsuz Davranƒ±≈ü	Neden
     * API √ßaƒürƒ±sƒ±	Domain veri sƒ±nƒ±fƒ± UI ya da data layer'a sƒ±zmƒ±≈ü olurdu
     * Veritabanƒ± eri≈üimi	UseCase'e ta≈üƒ±nmalƒ±ydƒ±
     * Kullanƒ±cƒ± input'u validasyonu	Bu HomeContent deƒüil, genellikle UseCase‚Äôin sorumluluƒüudur
     * Yan etki √ºretme (Toast, Navigation, Loglama, vb.)	UI ya da application layer‚Äôda olmalƒ±
     */

    /**
     * Update specific section (immutable update)
     */
    fun updateSection(categoryType: MovieCategoryType, newSection: MovieSection): HomeContent {
        return when (categoryType) {
            MovieCategoryType.NOW_PLAYING -> copy(nowPlayingSection = newSection)
            MovieCategoryType.POPULAR -> copy(popularSection = newSection)
            MovieCategoryType.TOP_RATED -> copy(topRatedSection = newSection)
            MovieCategoryType.UPCOMING -> copy(upcomingSection = newSection)
        }
    }

    /**
     * Get specific section by category
     */
    fun getSection(categoryType: MovieCategoryType): MovieSection {
        return when (categoryType) {
            MovieCategoryType.NOW_PLAYING -> nowPlayingSection
            MovieCategoryType.POPULAR -> popularSection
            MovieCategoryType.TOP_RATED -> topRatedSection
            MovieCategoryType.UPCOMING -> upcomingSection
        }
    }

    companion object {
        fun empty(): HomeContent = HomeContent(
            nowPlayingSection = MovieSection.empty(MovieCategoryType.NOW_PLAYING),
            popularSection = MovieSection.empty(MovieCategoryType.POPULAR),
            topRatedSection = MovieSection.empty(MovieCategoryType.TOP_RATED),
            upcomingSection = MovieSection.empty(MovieCategoryType.UPCOMING)
        )

        fun loading(): HomeContent = HomeContent(
            nowPlayingSection = MovieSection.loading(MovieCategoryType.NOW_PLAYING),
            popularSection = MovieSection.loading(MovieCategoryType.POPULAR),
            topRatedSection = MovieSection.loading(MovieCategoryType.TOP_RATED),
            upcomingSection = MovieSection.loading(MovieCategoryType.UPCOMING)
        )
    }
}